digraph G {
program -> mainClass -> id_Factorial_0x1444f48;
id_Factorial_0x1444f48[label="Id Factorial"];
mainClass -> id_a_0x1444f68;
id_a_0x1444f68[label="Id a"];
mainClass -> Print_0x1444f20 -> Call_0x1444ee0_ -> New_Object_0x1439cd0_ -> id_Fac_0x1439cd8;
id_Fac_0x1439cd8[label="Id Fac"];
Call_0x1444ee0_ -> id_ComputeFac_0x1444ef0;
id_ComputeFac_0x1444ef0[label="Id ComputeFac"];
Call_0x1444ee0_ -> Arguments_0x1444e90_ -> constant_10_0x1444e70_;
Print_0x1444f20[label="Print"];
program -> Class_list_0x1444fa0 -> Class_0x1445610 -> id_Fac_0x1445618;
id_Fac_0x1445618[label="Id Fac"];
Class_0x1445610 -> id__0x1445638;
id__0x1445638[label="Id "];
Class_0x1445610 -> Class_0x1445610 -> Methods_0x1445000 -> Method_0x14455c0 -> int_0x1445030_;
Method_0x14455c0 -> id_ComputeFac_0x14455c8;
id_ComputeFac_0x14455c8[label="Id ComputeFac"];
Method_0x14455c0 -> Argument_declarations_0x14450f0 -> var_0x14450b0 -> id_num_0x14450c0;
id_num_0x14450c0[label="Id num"];
var_0x14450b0[label="num : int"];
Argument_declarations_0x14450f0[label="Arg declaration"];
Method_0x14455c0 -> Statements_0x1445140 -> var_statement_0x14451f0 -> var_0x14451b0 -> id_num_aux_0x14451c0;
id_num_aux_0x14451c0[label="Id num_aux"];
var_0x14451b0[label="num_aux : int"];
var_statement_0x14451f0[label="Var decl"];
Statements_0x1445140[label="Statements"];
Statements_0x1445140 -> If_0x1445530 -> Binary_operation_0x1445290_ -> IdExpression_0x1445230_ -> id_num_0x1445238;
id_num_0x1445238[label="Id num"];
Binary_operation_0x1445290_ -> less_0x1445290_;
Binary_operation_0x1445290_ -> constant_1_0x1445270_;
If_0x1445530 -> Assign_0x14452e0 -> id_num_aux_0x14452e8;
id_num_aux_0x14452e8[label="Id num_aux"];
Assign_0x14452e0 -> constant_1_0x14452c0_;
Assign_0x14452e0[label="Assign"];
If_0x1445530 -> Assign_0x14454f0 -> id_num_aux_0x14454f8;
id_num_aux_0x14454f8[label="Id num_aux"];
Assign_0x14454f0 -> Binary_operation_0x14454c0_ -> IdExpression_0x1445320_ -> id_num_0x1445328;
id_num_0x1445328[label="Id num"];
Binary_operation_0x14454c0_ -> mult_0x14454c0_;
Binary_operation_0x14454c0_ -> Call_0x1445480_ -> IdExpression_0x1445360_ -> this_0x1445360_;
Call_0x1445480_ -> id_ComputeFac_0x1445490;
id_ComputeFac_0x1445490[label="Id ComputeFac"];
Call_0x1445480_ -> Arguments_0x1445430_ -> Binary_operation_0x1445400_ -> IdExpression_0x14453a0_ -> id_num_0x14453a8;
id_num_0x14453a8[label="Id num"];
Binary_operation_0x1445400_ -> minus_0x1445400_;
Binary_operation_0x1445400_ -> constant_1_0x14453e0_;
Assign_0x14454f0[label="Assign"];
If_0x1445530[label="If-else"];
Statements_0x1445140[label="Statements"];
Method_0x14455c0 -> IdExpression_0x1445580_ -> id_num_aux_0x1445588;
id_num_aux_0x1445588[label="Id num_aux"];
Method_0x14455c0[label="Method ComputeFac"];
Methods_0x1445000[label="Methods"];
Class_0x1445610[label="Class Fac"];
Class_list_0x1444fa0[label="Classes"];
}
